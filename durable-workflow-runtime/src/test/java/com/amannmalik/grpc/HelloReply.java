// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: durable-workflow-runtime/src/test/proto/greet.proto

package com.amannmalik.grpc;

import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors.Descriptor;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.OneofDescriptor;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.Parser;
import com.google.protobuf.UninitializedMessageException;
import com.google.protobuf.UnknownFieldSet;

import java.io.IOException;
import java.io.InputStream;
import java.io.Serial;
import java.nio.ByteBuffer;

/**
 * Protobuf type {@code GreeterApi.HelloReply}
 */
public final class HelloReply extends GeneratedMessageV3
        implements
        // @@protoc_insertion_point(message_implements:GreeterApi.HelloReply)
        HelloReplyOrBuilder {
    public static final int MESSAGE_FIELD_NUMBER = 1;
    @Serial
    private static final long serialVersionUID = 0L;
    // @@protoc_insertion_point(class_scope:GreeterApi.HelloReply)
    private static final HelloReply DEFAULT_INSTANCE;
    private static final Parser<HelloReply> PARSER =
            new AbstractParser<>() {
                @Override
                public HelloReply parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    Builder builder = newBuilder();
                    try {
                        builder.mergeFrom(input, extensionRegistry);
                    } catch (InvalidProtocolBufferException e) {
                        throw e.setUnfinishedMessage(builder.buildPartial());
                    } catch (UninitializedMessageException e) {
                        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
                    } catch (IOException e) {
                        throw new InvalidProtocolBufferException(e)
                                .setUnfinishedMessage(builder.buildPartial());
                    }
                    return builder.buildPartial();
                }
            };

    static {
        DEFAULT_INSTANCE = new HelloReply();
    }

    @SuppressWarnings("serial")
    private volatile Object message_ = "";

    private byte memoizedIsInitialized = -1;

    // Use HelloReply.newBuilder() to construct.
    private HelloReply(GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private HelloReply() {
        message_ = "";
    }

    public static Descriptor getDescriptor() {
        return Greet.internal_static_GreeterApi_HelloReply_descriptor;
    }

    public static HelloReply parseFrom(ByteBuffer data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static HelloReply parseFrom(
            ByteBuffer data, ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static HelloReply parseFrom(ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static HelloReply parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static HelloReply parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static HelloReply parseFrom(
            byte[] data, ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static HelloReply parseFrom(InputStream input)
            throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static HelloReply parseFrom(
            InputStream input, ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return GeneratedMessageV3.parseWithIOException(
                PARSER, input, extensionRegistry);
    }

    public static HelloReply parseDelimitedFrom(InputStream input)
            throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
    }

    public static HelloReply parseDelimitedFrom(
            InputStream input, ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return GeneratedMessageV3.parseDelimitedWithIOException(
                PARSER, input, extensionRegistry);
    }

    public static HelloReply parseFrom(CodedInputStream input)
            throws IOException {
        return GeneratedMessageV3.parseWithIOException(PARSER, input);
    }

    public static HelloReply parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return GeneratedMessageV3.parseWithIOException(
                PARSER, input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(HelloReply prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public static HelloReply getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    public static Parser<HelloReply> parser() {
        return PARSER;
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(UnusedPrivateParameter unused) {
        return new HelloReply();
    }

    @Override
    public UnknownFieldSet getUnknownFields() {
        return this.unknownFields;
    }

    @Override
    protected FieldAccessorTable
    internalGetFieldAccessorTable() {
        return Greet.internal_static_GreeterApi_HelloReply_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        HelloReply.class, Builder.class);
    }

    /**
     * <code>string message = 1;</code>
     *
     * @return The message.
     */
    @Override
    public String getMessage() {
        Object ref = message_;
        if (ref instanceof String) {
            return (String) ref;
        } else {
            ByteString bs = (ByteString) ref;
            String s = bs.toStringUtf8();
            message_ = s;
            return s;
        }
    }

    /**
     * <code>string message = 1;</code>
     *
     * @return The bytes for message.
     */
    @Override
    public ByteString getMessageBytes() {
        Object ref = message_;
        if (ref instanceof String) {
            ByteString b =
                    ByteString.copyFromUtf8((String) ref);
            message_ = b;
            return b;
        } else {
            return (ByteString) ref;
        }
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output) throws IOException {
        if (!GeneratedMessageV3.isStringEmpty(message_)) {
            GeneratedMessageV3.writeString(output, 1, message_);
        }
        getUnknownFields().writeTo(output);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!GeneratedMessageV3.isStringEmpty(message_)) {
            size += GeneratedMessageV3.computeStringSize(1, message_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
    }

    @Override
    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof HelloReply other)) {
            return super.equals(obj);
        }

        if (!getMessage().equals(other.getMessage())) return false;
        return getUnknownFields().equals(other.getUnknownFields());
    }

    @Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
        hash = (53 * hash) + getMessage().hashCode();
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
        return new Builder(parent);
    }

    @Override
    public Parser<HelloReply> getParserForType() {
        return PARSER;
    }

    @Override
    public HelloReply getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

    /**
     * Protobuf type {@code GreeterApi.HelloReply}
     */
    public static final class Builder extends GeneratedMessageV3.Builder<Builder>
            implements
            // @@protoc_insertion_point(builder_implements:GreeterApi.HelloReply)
            HelloReplyOrBuilder {
        private int bitField0_;
        private Object message_ = "";

        // Construct using com.amannmalik.grpc.HelloReply.newBuilder()
        private Builder() {
        }

        private Builder(BuilderParent parent) {
            super(parent);
        }

        public static Descriptor getDescriptor() {
            return Greet.internal_static_GreeterApi_HelloReply_descriptor;
        }

        @Override
        protected FieldAccessorTable
        internalGetFieldAccessorTable() {
            return Greet.internal_static_GreeterApi_HelloReply_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            HelloReply.class, Builder.class);
        }

        @Override
        public Builder clear() {
            super.clear();
            bitField0_ = 0;
            message_ = "";
            return this;
        }

        @Override
        public Descriptor getDescriptorForType() {
            return Greet.internal_static_GreeterApi_HelloReply_descriptor;
        }

        @Override
        public HelloReply getDefaultInstanceForType() {
            return HelloReply.getDefaultInstance();
        }

        @Override
        public HelloReply build() {
            HelloReply result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public HelloReply buildPartial() {
            HelloReply result = new HelloReply(this);
            if (bitField0_ != 0) {
                buildPartial0(result);
            }
            onBuilt();
            return result;
        }

        private void buildPartial0(HelloReply result) {
            int from_bitField0_ = bitField0_;
            if (((from_bitField0_ & 0x00000001) != 0)) {
                result.message_ = message_;
            }
        }

        @Override
        public Builder clone() {
            return super.clone();
        }

        @Override
        public Builder setField(
                FieldDescriptor field, Object value) {
            return super.setField(field, value);
        }

        @Override
        public Builder clearField(FieldDescriptor field) {
            return super.clearField(field);
        }

        @Override
        public Builder clearOneof(OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }

        @Override
        public Builder setRepeatedField(
                FieldDescriptor field, int index, Object value) {
            return super.setRepeatedField(field, index, value);
        }

        @Override
        public Builder addRepeatedField(
                FieldDescriptor field, Object value) {
            return super.addRepeatedField(field, value);
        }

        @Override
        public Builder mergeFrom(Message other) {
            if (other instanceof HelloReply) {
                return mergeFrom((HelloReply) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(HelloReply other) {
            if (other == HelloReply.getDefaultInstance()) return this;
            if (!other.getMessage().isEmpty()) {
                message_ = other.message_;
                bitField0_ |= 0x00000001;
                onChanged();
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
        }

        @Override
        public boolean isInitialized() {
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            if (extensionRegistry == null) {
                throw new NullPointerException();
            }
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 10: {
                            message_ = input.readStringRequireUtf8();
                            bitField0_ |= 0x00000001;
                            break;
                        } // case 10
                        default: {
                            if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                                done = true; // was an endgroup tag
                            }
                            break;
                        } // default:
                    } // switch (tag)
                } // while (!done)
            } catch (InvalidProtocolBufferException e) {
                throw e.unwrapIOException();
            } finally {
                onChanged();
            } // finally
            return this;
        }

        /**
         * <code>string message = 1;</code>
         *
         * @return The message.
         */
        public String getMessage() {
            Object ref = message_;
            if (!(ref instanceof String)) {
                ByteString bs = (ByteString) ref;
                String s = bs.toStringUtf8();
                message_ = s;
                return s;
            } else {
                return (String) ref;
            }
        }

        /**
         * <code>string message = 1;</code>
         *
         * @param value The message to set.
         * @return This builder for chaining.
         */
        public Builder setMessage(String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            message_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
        }

        /**
         * <code>string message = 1;</code>
         *
         * @return The bytes for message.
         */
        public ByteString getMessageBytes() {
            Object ref = message_;
            if (ref instanceof String) {
                ByteString b =
                        ByteString.copyFromUtf8((String) ref);
                message_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        /**
         * <code>string message = 1;</code>
         *
         * @param value The bytes for message to set.
         * @return This builder for chaining.
         */
        public Builder setMessageBytes(ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            checkByteStringIsUtf8(value);
            message_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
        }

        /**
         * <code>string message = 1;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearMessage() {
            message_ = getDefaultInstance().getMessage();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
            return this;
        }

        @Override
        public Builder setUnknownFields(final UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }

        @Override
        public Builder mergeUnknownFields(final UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }

        // @@protoc_insertion_point(builder_scope:GreeterApi.HelloReply)
    }
}
